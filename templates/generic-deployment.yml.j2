{% if ports != [''] %}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ service_name }}
spec:
    {%- if external_ip %}
  externalIPs:
    - {{ external_ip }}
    {%- endif %}
  ports:
    {%- for port in ports %}
  - name: {{ service_name.split('-')[0] }}{{ port }}
    port: {{ port }}
    protocol: TCP
    targetPort: {{ port }}
    {%- endfor %}
  selector:
    app: {{ service_name }}
{%- endif %}
---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ service_name }}
spec:
  replicas: 1
  template:
    metadata:
      annotations:
        service_dependencies: "{{ ','.join(service_dependencies) }}"
        job_dependencies: "{{ ','.join(job_dependencies) }}"
        ds_dependencies: "{{ ','.join(ds_dependencies) }}"
        configs: "{{ configmaps_string }}"
      labels:
        app: {{ service_name }}
      name: {{ service_name }}
    spec:
      nodeSelector:
        app: controller
      securityContext:
        runAsUser: 0
      containers:
        - name: {{ service_name }}
          image: {{ docker_registry }}/centos-binary-{{ service_name }}:{{ image_version }}
          imagePullPolicy: Always
          env:
            - name: INTERFACE_NAME
              value: "eth0"
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
{%- for env in envs %}
            - name: {{ env.keys()[0] }}
              value: {{ env.values()[0] }}
{%- endfor %}
{%- if ports != [] %}
          readinessProbe:
            tcpSocket:
              port: {{ ports[0] }}
          ports:
    {%- for port in ports %}
          - containerPort: {{ port }}
            name: {{ service_name.split('-')[0] }}{{ port }}
            protocol: TCP
    {%- endfor %}
{%- endif %}
          resources:
            limits:
              memory: {{ memory }}
          volumeMounts:
{%- for configmap in configmaps %}
            - name: {{ configmap['configmap_name'] }}
              mountPath: /configmaps/{{ configmap['file_name'] }}
{%- endfor %}
{%- for emptydir in emptydirs %}
            - name: {{ emptydir['name'] }}
              mountPath: {{ emptydir['container_path'] }}
{%- endfor %}
      volumes:
{%- for configmap in configmaps %}
        - name: {{ configmap['configmap_name'] }}
          configMap:
            name: {{ configmap['configmap_name'] }}
            items:
            - key: {{ configmap['file_name'] }}
              path: {{ configmap['file_name'] }}
{%- endfor %}
{%- for emptydir in emptydirs %}
        - name: {{ emptydir['name'] }}
          emptyDir: {}
{%- endfor %}
